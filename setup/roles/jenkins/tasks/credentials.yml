- name: Wait for Jenkins to be ready
  uri:
    url: http://localhost:8080/login
    status_code: 200
    timeout: 60
    validate_certs: no
  register: jenkins_ready
  retries: 30
  delay: 5
  until: jenkins_ready.status == 200

- name: Download jenkins-cli.jar
  get_url:
    url: http://localhost:8080/jnlpJars/jenkins-cli.jar
    dest: /tmp/jenkins/jenkins-cli.jar

- name: Create Jenkins dockerhub_credintials
  shell: java -jar jenkins-cli.jar -s http://localhost:8080 -auth {{ jenkins_username }}:{{ jenkins_password }} groovy = < encrypt_pass.groovy
  register: encrypted_pass
  args:
    chdir: /tmp/jenkins

- name: Create kubeconfig from template
  template:
    src: jenkins-kubeconfig.yml.j2
    dest: /tmp/jenkins/jenkins-kubeconfig.yml
  vars:
    cert_data: "{{ cert_data.stdout }}"
    server: "{{ kube_ip.stdout }}:6443"
    token: "{{ jenkins_token.stdout }}"

- name: Encode kubeconfig as base64
  shell: base64 /tmp/jenkins/jenkins-kubeconfig.yml | tr -d '\n'
  register: kubeconfig_encoded

- name: Create creds from template
  template:
    src: credentials.xml.j2
    dest: /tmp/jenkins/credentials.xml
  vars:
    encrypted_pass: "{{ encrypted_pass }}"
    username: "{{ docker_username }}"
    secretBytes: "{{ kubeconfig_encoded.stdout }}"

- name: Create Jenkins job for front-end
  shell: |
    docker cp /tmp/jenkins/credentials.xml jenkins:/var/jenkins_home/credentials.xml
    rm -rf /tmp/jenkins/credentials.xml

- name: Restart Jenkins to apply changes
  command: docker restart jenkins
